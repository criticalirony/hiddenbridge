#!/usr/bin/env python3

try:
    import argparse
    import yaml
    import os
except ImportError as e:
    print(f'import failure {e}')
    print(f'try: python3 -m pip install -r scripts/python/requirements.txt')
    exit(1)

WORKING_DIR = os.path.abspath(os.path.normpath(os.path.dirname(__file__)))
DEFAULT_OUTPUT = 'config.go'
DEFAULT_APP = os.path.join(os.path.relpath(
    WORKING_DIR, os.getcwd()), os.path.basename(__file__))


def process(*, config=None, output=DEFAULT_OUTPUT):
    assert config is not None

    exec_cmd = f'{DEFAULT_APP} {config} -o {output}'

    source = [
        'package main',
        '',
        f'// Code generated by {exec_cmd}; DO NOT EDIT.',
        f'//go:generate {exec_cmd}',
        ''
    ]

    with open(config, "r") as stream:
        config = yaml.safe_load(stream)

    import_list = set()
    # port_list = set()
    for name in config['plugins'].keys():
        import_list.add(name)
        # port_list.update(plugin['port'])

    source.append('import (')
    source += [
        f'\t_ "hiddenbridge/pkg/plugins/{x}"' for x in sorted(import_list)]
    source += [')', '']

    # source += [
    #     '\nvar (',
    #     '\tListeningPorts = []int{'
    # ]

    # source += [f'\t\t{x},' for x in sorted(port_list)]
    # source += ['\t}', ')', '']

    with open(output, 'w') as outf:
        outf.write('\n'.join(source))


def main(argv=None):
    parser = argparse.ArgumentParser(
        description="Generate golang source to auto import proxy plugins")
    parser.add_argument(
        'config', help='Path to config yml holding plusing infomration')
    parser.add_argument(
        '--output', '-o', help='Generated source output file', default=DEFAULT_OUTPUT)

    args = parser.parse_args(argv)
    process(**vars(args))


if __name__ == '__main__':
    main()
